{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAWdM,GAXc,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAACpB,IAEGqB,EDf2BK,CAAa1B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,6BAAKpB,IAIHoB,GAAW,cAGb,qBAAKJ,UAAU,YAAf,SAGIH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEjBVgB,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,UADd,mBACzBQ,EADyB,KACbT,EADa,KAGhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEIS,EAAWe,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CACEA,SAAUA,GACLA,Y,MCZnB4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.98ba36cb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const CategoryAdd = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(categories => [inputValue, ...categories])\r\n      setInputValue('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\n","\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=e8EVVoIXa7ZXcn8hEkRMj5YCSr3xE6FD&limit=10`\r\n  const resp = await fetch(url)\r\n  const { data } = await resp.json()\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__rollIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {\r\n        // loading ? 'Cargando...' : 'Información completa.'\r\n        loading && 'Cargando...'\r\n      }\r\n\r\n      <div className='card-grid'>\r\n        {\r\n          // usando el componente encargado de renderizar cada item\r\n          images.map(img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  // los efectos no pueden ser asíncronos, por lo tanto se debe usar el then y no el await\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(imgs => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      })\r\n  }, [category])\r\n\r\n  return state\n}\r\n","import React, { useState } from 'react'\r\nimport { CategoryAdd } from './components/CategoryAdd'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Ranma'])\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <CategoryAdd setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {\r\n          categories.map(category =>\r\n            <GifGrid\r\n              category={category}\r\n              key={category}\r\n            />\r\n          )\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  )\r\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}